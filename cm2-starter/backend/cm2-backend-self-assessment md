# Self-Assessment (Template)
This is self-assessment for the backend part of CM-2
Backend was handled by Sui and Eyob.

### Example 1: Improving Code Quality

Initially, our `sÃ­gnupUser` endpoint was functional but was only returning email and token, then it was modified to return more basic but non-sensitive use info. 

Here's the original implementation:  

```javascript

const signupUser = async (req, res) => {
    const { name, email, password, phone_number, gender, date_of_birth, membership_status } = req.body;

    try {
        const user = await User.signup(name, email, password, phone_number, gender, date_of_birth, membership_status);

        const token = generateToken(user._id);

        res.status(201).json({ email, token });
    } catch (error) {
        res.status(400).json({ error: error.message });
    }
};
```



The endpoint worked for requests like:  
`GET http://localhost:4000/users`  


To address these issues, we refactored the code to handle edge cases effectively:  

```javascript
const signupUser = async (req, res) => {
    const { name, email, password, phone_number, gender, date_of_birth, membership_status } = req.body;

    try {
        // Ideally, validate inputs here with Joi or express-validator

        const user = await User.signup(
            name,
            email,
            password,
            phone_number,
            gender,
            date_of_birth,
            membership_status
        );

        const token = generateToken(user._id);

        res.status(201).json({
            success: true,
            message: "User registered successfully",
            data: {
                id: user._id,
                name: user.name,
                email: user.email,
                membership_status: user.membership_status,
                token,
            },
        });
    } catch (error) {
        res.status(400).json({
            success: false,
            message: "Signup failed",
            error: error.message,
        });
    }
};
```
The same modification was made for the `loginUser`endpoint as well.

- **Improved Return:** The user will get a better response during signup and login.'
- **Use:** Insures a better user experience.

---

### Example 2: Debugging Route Order in Express

We had the following router set up;

```const express = require('express');
const router = express.Router();

const { loginUser, signupUser } = require('../controllers/userControllers');
router.post("/login", loginUser);
router.post("/signup", signupUser);


module.exports = router;
```
but we modified as follow so that it is more robust

```
const express = require('express');
const router = express.Router();

const { loginUser, signupUser } = require('../controllers/userControllers');

router.post("/api/login", loginUser);
router.post("/api/signup", signupUser);

```
- **api/login and api/signup :** Follows standard javascript procedure'

**Lessons Learned:** 

CM-2 has been agreta learning experince for me. We commmunicated well and worked well a group. 
From the backend side of the coding marathon, I believe we consolidated the knowledge we aquired from the lectures, activities and project work. 
We were also able to manage our github much better than we did during CM-1.

